{% extends "base.html" %}
{# Force cache update - {{ range(9999999) | random }} #}

{% block title %}Add New Product{% endblock %}

{% block head %}
<link rel="stylesheet" href="{{ url_for('static', filename='css/inventory_add.css') }}">
<!-- FilePond Styles -->
<link href="https://unpkg.com/filepond/dist/filepond.min.css" rel="stylesheet">
<link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css" rel="stylesheet">
<link href="https://unpkg.com/filepond-plugin-image-edit/dist/filepond-plugin-image-edit.min.css" rel="stylesheet">
<link href="https://unpkg.com/filepond-plugin-file-poster/dist/filepond-plugin-file-poster.min.css" rel="stylesheet">
<!-- Custom styles for currency inputs -->
<style>
    /* Base input styles - modern redesign */
    input[type="text"],
    input[type="number"],
    input[type="email"],
    input[type="password"],
    select,
    textarea {
        display: block;
        width: 100%;
        padding: 12px 16px;
        font-size: 14px;
        line-height: 1.5;
        color: #333;
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid #ddd;
        border-radius: 8px;
        transition: all 0.2s ease-in-out;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }
    
    /* Select element specific styles */
    select {
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 12px center;
        background-size: 16px;
        padding-right: 40px;
    }
    
    select:focus {
        border-color: #4a90e2;
        outline: none;
        box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.15);
    }
    
    select option {
        padding: 8px;
    }
    
    /* Placeholder styling */
    ::placeholder {
        color: #aaa;
        opacity: 1;
    }
    
    /* Label styles */
    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
        color: #333;
        font-size: 14px;
    }
    
    /* Form group spacing */
    .form-group {
        margin-bottom: 24px;
    }
    
    /* Required field indicator */
    .required {
        color: #e74c3c;
        margin-left: 2px;
    }
    
    /* Error message styling */
    .error-message {
        color: #e74c3c;
        font-size: 12px;
        margin-top: 6px;
    }
    
    /* Help text styling */
    .form-text {
        display: block;
        margin-top: 6px;
        font-size: 12px;
        color: #777;
    }
    
    /* Input with icon (for currency) - completely new design */
    .input-with-icon {
        display: flex;
        align-items: center;
        border: 1px solid #ddd;
        border-radius: 4px;
        overflow: hidden;
        background-color: #fff;
        width: 100%;
        height: 44px;
    }
    
    .currency-symbol {
    display: flex;
    align-items: center;
        justify-content: center;
        padding: 0 10px;
        height: 100%;
        font-size: 16px;
        color: #555;
        background-color: #f8f8f8;
        border-right: 1px solid #ddd;
        min-width: 36px;
    }
    
    .input-with-icon input {
        height: 100%;
        padding: 0 12px;
        border: none;
        background: none;
        font-size: 15px;
        flex: 1;
        outline: none;
        box-shadow: none;
        color: #333;
    }
    
    .input-with-icon input::placeholder {
        color: #aaa;
    }
    
    .input-with-icon:focus-within {
        border-color: #4a90e2;
        box-shadow: 0 0 0 2px rgba(74, 144, 226, 0.2);
    }
    
    /* Input with button */
    .input-with-button {
        display: grid;
        grid-template-columns: 1fr auto;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }
    
    .input-with-button input {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        border-right: none;
        box-shadow: none;
    }
    
    .input-with-button button {
    display: flex;
    align-items: center;
        justify-content: center;
        width: 48px;
        background-color: #f0f2f5;
        border: 1px solid #ddd;
        border-left: none;
        border-top-right-radius: 8px;
        border-bottom-right-radius: 8px;
        color: #333;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }
    
    .input-with-button button:hover {
        background-color: #e2e6ea;
        color: #4a90e2;
    }
    
    /* Dimensions input */
    .dimensions-input {
        display: grid;
        grid-template-columns: 1fr auto 1fr auto 1fr;
        gap: 8px;
    align-items: center;
}

    .dimension-field {
        width: 100%;
    }
    
    .dimension-separator {
        text-align: center;
        color: #777;
        font-weight: 500;
    }
    
    /* Toggle switch */
    .toggle-switch {
        display: flex;
        align-items: center;
    }
    
    .toggle-switch input[type="checkbox"] {
        height: 0;
        width: 0;
        visibility: hidden;
    position: absolute;
    }
    
    .toggle-switch label {
    cursor: pointer;
        width: 52px;
        height: 26px;
        background: #ddd;
        display: block;
        border-radius: 26px;
        position: relative;
        margin-right: 12px;
        margin-bottom: 0;
        transition: background-color 0.2s ease;
    }
    
    .toggle-switch label:after {
        content: '';
    position: absolute;
        top: 3px;
        left: 3px;
        width: 20px;
        height: 20px;
        background: #fff;
        border-radius: 20px;
        transition: all 0.2s ease;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .toggle-switch input:checked + label {
        background: #4CAF50;
    }
    
    .toggle-switch input:checked + label:after {
        left: calc(100% - 3px);
        transform: translateX(-100%);
    }
    
    .toggle-label {
        font-size: 14px;
        color: #333;
        font-weight: 500;
    }
    
    /* Profit margin display */
    .profit-margin-display {
        padding: 12px 16px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 8px;
        display: flex;
        justify-content: space-between;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }
    
    /* Barcode preview */
    .barcode-preview {
        margin-top: 16px;
        padding: 20px;
        background-color: #fff;
        border: 1px solid #ddd;
    border-radius: 8px;
        text-align: center;
        min-height: 160px;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    }
    
    .barcode-preview svg {
        max-width: 100%;
        height: auto;
    }
    
    /* Barcode type selector */
    .barcode-type-selector {
        display: flex;
        align-items: center;
        margin-top: 12px;
        gap: 12px;
    }
    
    .barcode-type-selector label {
        margin-bottom: 0;
        font-size: 14px;
    }
    
    .barcode-type-selector select {
        width: auto;
        padding: 8px 12px;
        border-radius: 6px;
    }
    
    /* Adjust these styles for number inputs to prevent the up/down arrows */
    input[type="number"]::-webkit-inner-spin-button,
    input[type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }
    input[type="number"] {
        -moz-appearance: textfield;
    }
    
    /* Form sections */
    .form-section {
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        padding: 24px;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .section-title {
        font-size: 18px;
        font-weight: 600;
        color: #333;
        margin-bottom: 24px;
        padding-bottom: 12px;
        border-bottom: 1px solid #eee;
    }

    /* Form content wrapper */
    .form-content {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

    /* Ensure form groups maintain spacing */
    .form-group {
        margin-bottom: 24px;
    }

    .form-group:last-child {
        margin-bottom: 0;
    }
    
    /* Form actions */
    .form-actions {
        display: flex;
        justify-content: flex-end;
        gap: 16px;
        margin-top: 32px;
        padding: 24px;
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    }
    
    .btn-primary {
        background-color: #4a90e2;
    color: white;
    border: none;
        padding: 12px 24px;
        border-radius: 8px;
    cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .btn-primary:hover {
        background-color: #3a7bc8;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .btn-cancel {
        background-color: #f5f5f5;
        color: #555;
        border: 1px solid #ddd;
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.2s ease;
    }
    
    .btn-cancel:hover {
        background-color: #e8e8e8;
        color: #333;
    }
</style>

<!-- JsBarcode - Load early -->
<script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
<!-- Barcode Handler - Load after JsBarcode -->
<script src="{{ url_for('static', filename='js/barcode/barcode-handler.js') }}"></script>

<!-- SKU Generator Script - Load early -->
<script src="{{ url_for('static', filename='js/sku-generator.js') }}"></script>

<!-- Barcode Handling Script - Completely rewritten -->
<script>
    // Global barcode handling functions
    window.BarcodeUtils = {
        // Generate barcode and update preview
        generateBarcode: function() {
            var barcodeInput = document.getElementById('product-barcode');
            var barcodeType = document.getElementById('barcode-type');
            
            if (!barcodeInput || !barcodeType || !barcodeType.value) {
                alert('Please select a barcode type first');
                if (barcodeType) barcodeType.focus();
                return;
            }
            
            var barcodeValue = '';
            
            // Generate based on type
            switch (barcodeType.value) {
                case 'EAN13':
                    barcodeValue = Array.from({length: 12}, () => Math.floor(Math.random() * 10)).join('');
                    break;
                case 'CODE128':
                    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                    barcodeValue = Array.from({length: 10}, () => chars.charAt(Math.floor(Math.random() * chars.length))).join('');
                    break;
                case 'UPC':
                    barcodeValue = Array.from({length: 11}, () => Math.floor(Math.random() * 10)).join('');
                    break;
                default:
                    barcodeValue = 'SAMPLE12345';
            }
            
            // Set the value
            barcodeInput.value = barcodeValue;
            
            // Visual feedback
            barcodeInput.style.backgroundColor = '#f0fff4';
            barcodeInput.style.borderColor = '#68d391';
            
                setTimeout(function() {
                barcodeInput.style.backgroundColor = '';
                barcodeInput.style.borderColor = '';
                }, 1500);
                
            // Update preview
            this.updatePreview(barcodeValue, barcodeType.value);
        },
        
        // Update barcode preview
        updatePreview: function(value, type) {
            var previewContainer = document.getElementById('barcode-preview');
            if (!previewContainer) return;
            
            if (!value || !value.trim()) {
                previewContainer.innerHTML = '<div class="error-message">Enter a barcode value</div>';
                return;
            }
            
            if (!type) {
                var barcodeType = document.getElementById('barcode-type');
                type = barcodeType ? barcodeType.value : 'CODE128';
            }
            
            // Clear container
            previewContainer.innerHTML = '';
            
            try {
                // Create SVG
                var svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                previewContainer.appendChild(svgElement);
                
                // Generate barcode
                JsBarcode(svgElement, value.trim(), {
                    format: type,
                    width: 2,
                    height: 100,
                    displayValue: true,
                    fontSize: 16,
                    margin: 10,
                    background: '#ffffff',
                    lineColor: '#000000'
                });
            } catch (error) {
                console.error('Error generating barcode:', error);
                previewContainer.innerHTML = '<div class="error-message">Invalid barcode value or type</div>';
            }
        }
    };
    
    // Global functions for compatibility with existing code
    window.forceUpdateBarcodePreview = function() {
        console.log('Force updating barcode preview');
                                        const barcodeInput = document.getElementById('product-barcode');
                                        const barcodeType = document.getElementById('barcode-type');
                                        const previewContainer = document.getElementById('barcode-preview');
                                        
                                        if (!barcodeInput || !barcodeType || !previewContainer) {
            console.log('Barcode elements not found for force update');
                                            return;
                                        }
                                        
                                        if (barcodeInput.value.trim()) {
                                            console.log('Updating barcode preview for:', barcodeInput.value);
                                            
                                            // Clear previous barcode
                                            previewContainer.innerHTML = '';
                                            
                                            try {
                                                // Create SVG element for the barcode
                                                const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                                                previewContainer.appendChild(svgElement);
                                                
                // Check if JsBarcode is available
                if (typeof JsBarcode !== 'function') {
                    console.error('JsBarcode not available, trying to load it');
                                                    const script = document.createElement('script');
                                                    script.src = 'https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js';
                                                    document.head.appendChild(script);
                    
                    // Try again after script loads
                    setTimeout(window.forceUpdateBarcodePreview, 500);
                    return;
                }
                
                // Generate barcode
                JsBarcode(svgElement, barcodeInput.value, {
                    format: barcodeType.value || 'CODE128',
                    lineColor: '#000',
                    width: 2,
                    height: 80,
                    displayValue: true,
                    fontSize: 16,
                    margin: 10,
                    background: '#ffffff'
                });
                
                console.log('Barcode preview updated successfully');
            } catch (error) {
                console.error('Error updating barcode preview:', error);
                previewContainer.innerHTML = '<div style="color: red; padding: 10px;">Invalid barcode value or format</div>';
                
                // Try again with a safe default format
                try {
                    // Only retry if we have an actual value
                    if (barcodeInput.value.trim()) {
                        previewContainer.innerHTML = '';
                        const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                        previewContainer.appendChild(svgElement);
                        
                        JsBarcode(svgElement, barcodeInput.value, {
                            format: 'CODE128',
                                lineColor: '#000',
                                width: 2,
                            height: 80,
                                displayValue: true,
                            fontSize: 16,
                                margin: 10
                            });
                        }
                } catch (retryError) {
                    console.error('Error in retry attempt:', retryError);
                }
            }
        }
    };
    
    // Create a global force refresh function that applications can call
    window.forceBarcodeRefresh = function() {
        const barcodeInput = document.getElementById('product-barcode');
        const barcodeType = document.getElementById('barcode-type');
        const previewContainer = document.getElementById('barcode-preview');
        
        if (!barcodeInput || !barcodeInput.value || !previewContainer) {
                return;
            }
            
        previewContainer.innerHTML = '';
        const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        previewContainer.appendChild(svgElement);
        
        try {
            JsBarcode(svgElement, barcodeInput.value, {
                format: barcodeType ? barcodeType.value : 'CODE128',
                width: 2,
                height: 80,
                displayValue: true,
                fontSize: 16,
                margin: 10,
                background: '#ffffff'
            });
        } catch (error) {
            previewContainer.innerHTML = '<p style="color: red; text-align: center;">Invalid barcode</p>';
        }
    };
</script>

<!-- Override generate button behavior -->
<script>
    // Make sure to override the generate button's behavior
    document.addEventListener('DOMContentLoaded', function() {
        var generateBtn = document.getElementById('generate-barcode');
        if (generateBtn) {
            // Remove the inline handler
            generateBtn.removeAttribute('onclick');
            
            // Add a direct event listener
            generateBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                
                // Use our dedicated barcode handler
                if (typeof BarcodeHandler === 'object' && typeof BarcodeHandler.generateBarcode === 'function') {
                    BarcodeHandler.generateBarcode();
            } else {
                    console.error('BarcodeHandler not available, using fallback');
                    
                    // Fallback direct implementation
                    const barcodeInput = document.getElementById('product-barcode');
                    const barcodeType = document.getElementById('barcode-type');
                    const previewContainer = document.getElementById('barcode-preview');
                    
                    if (!barcodeType || !barcodeInput || !previewContainer) return;
                    
                    if (!barcodeType.value) {
                        alert('Please select a barcode type first');
                        barcodeType.focus();
                        return;
                    }
                    
                    // Generate barcode value
                    let barcodeValue = '';
                    
                    switch (barcodeType.value) {
                        case 'EAN13':
                            barcodeValue = Array.from({length: 12}, () => Math.floor(Math.random() * 10)).join('');
                            break;
                        case 'UPC':
                            barcodeValue = Array.from({length: 11}, () => Math.floor(Math.random() * 10)).join('');
                            break;
                        default:
                            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
                            barcodeValue = Array.from({length: 10}, () => chars.charAt(Math.floor(Math.random() * chars.length))).join('');
                    }
                    
                    // Set the value
                    barcodeInput.value = barcodeValue;
                    
                    // Visual feedback
                    barcodeInput.style.backgroundColor = '#f0fff4';
                    barcodeInput.style.borderColor = '#68d391';
                    
                setTimeout(function() {
                        barcodeInput.style.backgroundColor = '';
                        barcodeInput.style.borderColor = '';
                    }, 1500);
                    
                    // Generate preview
                    try {
                previewContainer.innerHTML = '';
                const svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
                previewContainer.appendChild(svgElement);
                
                        JsBarcode(svgElement, barcodeValue, {
                        format: barcodeType.value,
                        width: 2,
                            height: 80,
                        displayValue: true,
                            fontSize: 16,
                            margin: 10,
                            background: '#ffffff'
                        });
                } catch (error) {
                        console.error('Error generating barcode:', error);
                        previewContainer.innerHTML = '<div style="color: red; padding: 10px;">Error generating barcode</div>';
                    }
                }
                
                return false;
            });
            
            console.log('Generate barcode button behavior overridden successfully');
        }
});
</script>
{% endblock %}